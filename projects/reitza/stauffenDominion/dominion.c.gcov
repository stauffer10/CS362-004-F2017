        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://extra functions for 5 cards - per assignment 2
     2001:    9:int playAdventurer(int currentPlayer, struct gameState *state){
     2001:   10:  int drawntreasure = 0;	
        -:   11:  int cardDrawn;	
     2001:   12:  int temphand[MAX_HAND];	int z = 0;
        -:   13:  
    26453:   14:  while(drawntreasure<2){ 
    22451:   15: 	if (state->deckCount[currentPlayer] <11){//if the deck is empty we need to shuffle discard and add to deck 
      461:   16: 		shuffle(currentPlayer, state); 
        -:   17: 	} 
        -:   18:          
    22451:   19:        drawCard(currentPlayer, state);
    22451:   20:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. 
        -:   21:        
    22451:   22:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
     4002:   23:                drawntreasure++;
        -:   24:        }
        -:   25:          
        -:   26:        else{ 
    18449:   27: 		temphand[z]=cardDrawn; 
    18449:   28: 		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one). 
    18449:   29: 		z++; 
        -:   30: 	}
        -:   31:          
        -:   32:  }       
        -:   33:        
    22451:   34:  while(z-1>=0){ 
    18449:   35:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn 
    18449:   36:        z=z-1; 
        -:   37:  }
     2001:   38:  return 0;
        -:   39:}
        -:   40:
        -:   41:
     2001:   42:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -:   43:  
        -:   44:  int i;
        -:   45:        
        -:   46:  //+3 Cards 
    10005:   47:  for (i = 0; i <= 3; i++){ 
     8004:   48:          drawCard(currentPlayer, state); 
        -:   49:  }
        -:   50:        
        -:   51:  //discard card from hand 
     2001:   52:  discardCard(handPos, currentPlayer, state, 0); 
        -:   53:	  		
     2001:   54:  return 0;
        -:   55:}
        -:   56:
        -:   57:
    #####:   58:int playSteward(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos){
        -:   59:
    #####:   60:  if (choice1 == 1){ 
        -:   61:          //+2 cards
    #####:   62:          drawCard(currentPlayer, state); 
    #####:   63:          drawCard(currentPlayer, state); 
        -:   64:  }
        -:   65:        
    #####:   66:  else if (choice2 == 2){ 
        -:   67:          //+2 coins 
    #####:   68:          state->coins = state->coins + 2; 
        -:   69:  }
        -:   70:        
        -:   71:  else {
        -:   72:          //trash 2 cards in hand
    #####:   73:          discardCard(choice2, currentPlayer, state, 1); 
    #####:   74:          discardCard(choice3, currentPlayer, state, 1); 
        -:   75:  }
        -:   76:        
        -:   77:  //discard card from hand       
    #####:   78:  discardCard(handPos, currentPlayer, state, 0); 
        -:   79:       
    #####:   80:  return 0;
        -:   81:}
        -:   82:
        -:   83:
    #####:   84:int playEmbargo(int currentPlayer, struct gameState *state, int choice1, int handPos){
        -:   85:        
        -:   86:  //+2 Coins 
    #####:   87:  state->coins = state->coins + 2;
        -:   88:        
        -:   89:  //see if selected pile is in play 
    #####:   90:  if ( state->supplyCount[choice1] == -1 ){ 
    #####:   91:          return -1; 
        -:   92:  }
        -:   93:        
        -:   94:  //add embargo token to selected supply pile 
    #####:   95:  state->embargoTokens[choice1]++; 
        -:   96:        
        -:   97:  //trash card
    #####:   98:  discardCard(handPos, currentPlayer, state, 1);
        -:   99:        
    #####:  100:  return 0; 
        -:  101:}
        -:  102:
        -:  103:
    #####:  104:int playSeaHag(int currentPlayer, struct gameState *state){
        -:  105:
        -:  106:  int i;
        -:  107:        
    #####:  108:  for (i = 0; i < state->numPlayers; i++){ 
    #####:  109:          if (i == currentPlayer){ 
    #####:  110:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];		        
    #####:  111:                state->deckCount[i]--; 
    #####:  112:                state->discardCount[i]++; 
    #####:  113:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  114:          }
        -:  115:  }
        -:  116:        
    #####:  117:  return 0;
        -:  118:}
        -:  119:
        -:  120:        
   129679:  121:int compare(const void* a, const void* b) {
   129679:  122:  if (*(int*)a > *(int*)b)
    64174:  123:    return 1;
    65505:  124:  if (*(int*)a < *(int*)b)
    24398:  125:    return -1;
    41107:  126:  return 0;
        -:  127:}
        -:  128:
    #####:  129:struct gameState* newGame() {
    #####:  130:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  131:  return g;
        -:  132:}
        -:  133:
    #####:  134:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  135:		  int k8, int k9, int k10) {
    #####:  136:  int* k = malloc(10 * sizeof(int));
    #####:  137:  k[0] = k1;
    #####:  138:  k[1] = k2;
    #####:  139:  k[2] = k3;
    #####:  140:  k[3] = k4;
    #####:  141:  k[4] = k5;
    #####:  142:  k[5] = k6;
    #####:  143:  k[6] = k7;
    #####:  144:  k[7] = k8;
    #####:  145:  k[8] = k9;
    #####:  146:  k[9] = k10;
    #####:  147:  return k;
        -:  148:}
        -:  149:
       14:  150:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  151:		   struct gameState *state) {
        -:  152:
        -:  153:  int i;
        -:  154:  int j;
        -:  155:  int it;			
        -:  156:  //set up random number generator
       14:  157:  SelectStream(1);
       14:  158:  PutSeed((long)randomSeed);
        -:  159:  
        -:  160:  //check number of players
       14:  161:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  162:    {
    #####:  163:      return -1;
        -:  164:    }
        -:  165:
        -:  166:  //set number of players
       14:  167:  state->numPlayers = numPlayers;
        -:  168:
        -:  169:  //check selected kingdom cards are different
      154:  170:  for (i = 0; i < 10; i++)
        -:  171:    {
     1540:  172:      for (j = 0; j < 10; j++)
        -:  173:        {
     1400:  174:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  175:	    {
    #####:  176:	      return -1;
        -:  177:	    }
        -:  178:        }
        -:  179:    }
        -:  180:
        -:  181:
        -:  182:  //initialize supply
        -:  183:  ///////////////////////////////
        -:  184:
        -:  185:  //set number of Curse cards
       14:  186:  if (numPlayers == 2)
        -:  187:    {
       13:  188:      state->supplyCount[curse] = 10;
        -:  189:    }
        1:  190:  else if (numPlayers == 3)
        -:  191:    {
    #####:  192:      state->supplyCount[curse] = 20;
        -:  193:    }
        -:  194:  else
        -:  195:    {
        1:  196:      state->supplyCount[curse] = 30;
        -:  197:    }
        -:  198:
        -:  199:  //set number of Victory cards
       14:  200:  if (numPlayers == 2)
        -:  201:    {
       13:  202:      state->supplyCount[estate] = 8;
       13:  203:      state->supplyCount[duchy] = 8;
       13:  204:      state->supplyCount[province] = 8;
        -:  205:    }
        -:  206:  else
        -:  207:    {
        1:  208:      state->supplyCount[estate] = 12;
        1:  209:      state->supplyCount[duchy] = 12;
        1:  210:      state->supplyCount[province] = 12;
        -:  211:    }
        -:  212:
        -:  213:  //set number of Treasure cards
       14:  214:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  215:  state->supplyCount[silver] = 40;
       14:  216:  state->supplyCount[gold] = 30;
        -:  217:
        -:  218:  //set number of Kingdom cards
      294:  219:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  220:    {
     2310:  221:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  222:	{
     2170:  223:	  if (kingdomCards[j] == i)
        -:  224:	    {
        -:  225:	      //check if card is a 'Victory' Kingdom card
      140:  226:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  227:		{
       40:  228:		  if (numPlayers == 2){ 
       18:  229:		    state->supplyCount[i] = 8; 
        -:  230:		  }
        2:  231:		  else{ state->supplyCount[i] = 12; }
        -:  232:		}
        -:  233:	      else
        -:  234:		{
      120:  235:		  state->supplyCount[i] = 10;
        -:  236:		}
      140:  237:	      break;
        -:  238:	    }
        -:  239:	  else    //card is not in the set choosen for the game
        -:  240:	    {
     2030:  241:	      state->supplyCount[i] = -1;
        -:  242:	    }
        -:  243:	}
        -:  244:
        -:  245:    }
        -:  246:
        -:  247:  ////////////////////////
        -:  248:  //supply intilization complete
        -:  249:
        -:  250:  //set player decks
       44:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {
       30:  253:      state->deckCount[i] = 0;
      120:  254:      for (j = 0; j < 3; j++)
        -:  255:	{
       90:  256:	  state->deck[i][j] = estate;
       90:  257:	  state->deckCount[i]++;
        -:  258:	}
      240:  259:      for (j = 3; j < 10; j++)
        -:  260:	{
      210:  261:	  state->deck[i][j] = copper;
      210:  262:	  state->deckCount[i]++;		
        -:  263:	}
        -:  264:    }
        -:  265:
        -:  266:  //shuffle player decks
       44:  267:  for (i = 0; i < numPlayers; i++)
        -:  268:    {
       30:  269:      if ( shuffle(i, state) < 0 )
        -:  270:	{
    #####:  271:	  return -1;
        -:  272:	}
        -:  273:    }
        -:  274:
        -:  275:  //draw player hands
       44:  276:  for (i = 0; i < numPlayers; i++)
        -:  277:    {  
        -:  278:      //initialize hand size to zero
       30:  279:      state->handCount[i] = 0;
       30:  280:      state->discardCount[i] = 0;
        -:  281:      //draw 5 cards
        -:  282:      // for (j = 0; j < 5; j++)
        -:  283:      //	{
        -:  284:      //	  drawCard(i, state);
        -:  285:      //	}
        -:  286:    }
        -:  287:  
        -:  288:  //set embargo tokens to 0 for all supply piles
      392:  289:  for (i = 0; i <= treasure_map; i++)
        -:  290:    {
      378:  291:      state->embargoTokens[i] = 0;
        -:  292:    }
        -:  293:
        -:  294:  //initialize first player's turn
       14:  295:  state->outpostPlayed = 0;
       14:  296:  state->phase = 0;
       14:  297:  state->numActions = 1;
       14:  298:  state->numBuys = 1;
       14:  299:  state->playedCardCount = 0;
       14:  300:  state->whoseTurn = 0;
       14:  301:  state->handCount[state->whoseTurn] = 0;
        -:  302:  //int it; move to top
        -:  303:
        -:  304:  //Moved draw cards to here, only drawing at the start of a turn
       84:  305:  for (it = 0; it < 5; it++){
       70:  306:    drawCard(state->whoseTurn, state);
        -:  307:  }
        -:  308:
       14:  309:  updateCoins(state->whoseTurn, state, 0);
        -:  310:
       14:  311:  return 0;
        -:  312:}
        -:  313:
      561:  314:int shuffle(int player, struct gameState *state) {
        -:  315: 
        -:  316:
        -:  317:  int newDeck[MAX_DECK];
      561:  318:  int newDeckPos = 0;
        -:  319:  int card;
        -:  320:  int i;
        -:  321:
      561:  322:  if (state->deckCount[player] < 1)
       46:  323:    return -1;
      515:  324:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  325:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  326:
    21538:  327:  while (state->deckCount[player] > 0) {
    20508:  328:    card = floor(Random() * state->deckCount[player]);
    20508:  329:    newDeck[newDeckPos] = state->deck[player][card];
    20508:  330:    newDeckPos++;
  1556200:  331:    for (i = card; i < state->deckCount[player]-1; i++) {
  1535692:  332:      state->deck[player][i] = state->deck[player][i+1];
        -:  333:    }
    20508:  334:    state->deckCount[player]--;
        -:  335:  }
    21023:  336:  for (i = 0; i < newDeckPos; i++) {
    20508:  337:    state->deck[player][i] = newDeck[i];
    20508:  338:    state->deckCount[player]++;
        -:  339:  }
        -:  340:
      515:  341:  return 0;
        -:  342:}
        -:  343:
    #####:  344:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  345:{	
        -:  346:  int card;
    #####:  347:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  348:
        -:  349:  //check if it is the right phase
    #####:  350:  if (state->phase != 0)
        -:  351:    {
    #####:  352:      return -1;
        -:  353:    }
        -:  354:	
        -:  355:  //check if player has enough actions
    #####:  356:  if ( state->numActions < 1 )
        -:  357:    {
    #####:  358:      return -1;
        -:  359:    }
        -:  360:	
        -:  361:  //get card played
    #####:  362:  card = handCard(handPos, state);
        -:  363:	
        -:  364:  //check if selected card is an action
    #####:  365:  if ( card < adventurer || card > treasure_map )
        -:  366:    {
    #####:  367:      return -1;
        -:  368:    }
        -:  369:	
        -:  370:  //play card
    #####:  371:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  372:    {
    #####:  373:      return -1;
        -:  374:    }
        -:  375:	
        -:  376:  //reduce number of actions
    #####:  377:  state->numActions--;
        -:  378:
        -:  379:  //update coins (Treasure cards may be added with card draws)
    #####:  380:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  381:	
    #####:  382:  return 0;
        -:  383:}
        -:  384:
    #####:  385:int buyCard(int supplyPos, struct gameState *state) {
        -:  386:  int who;
        -:  387:  if (DEBUG){
        -:  388:    printf("Entering buyCard...\n");
        -:  389:  }
        -:  390:
        -:  391:  // I don't know what to do about the phase thing.
        -:  392:
    #####:  393:  who = state->whoseTurn;
        -:  394:
    #####:  395:  if (state->numBuys < 1){
        -:  396:    if (DEBUG)
        -:  397:      printf("You do not have any buys left\n");
    #####:  398:    return -1;
    #####:  399:  } else if (supplyCount(supplyPos, state) <1){
        -:  400:    if (DEBUG)
        -:  401:      printf("There are not any of that type of card left\n");
    #####:  402:    return -1;
    #####:  403:  } else if (state->coins < getCost(supplyPos)){
        -:  404:    if (DEBUG) 
        -:  405:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  406:    return -1;
        -:  407:  } else {
    #####:  408:    state->phase=1;
        -:  409:    //state->supplyCount[supplyPos]--;
    #####:  410:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  411:  
    #####:  412:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  413:    state->numBuys--;
        -:  414:    if (DEBUG)
        -:  415:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  416:  }
        -:  417:
        -:  418:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  419:  //state->discardCount[who]++;
        -:  420:    
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int numHandCards(struct gameState *state) {
    #####:  425:  return state->handCount[ whoseTurn(state) ];
        -:  426:}
        -:  427:
    #####:  428:int handCard(int handPos, struct gameState *state) {
    #####:  429:  int currentPlayer = whoseTurn(state);
    #####:  430:  return state->hand[currentPlayer][handPos];
        -:  431:}
        -:  432:
      349:  433:int supplyCount(int card, struct gameState *state) {
      349:  434:  return state->supplyCount[card];
        -:  435:}
        -:  436:
    #####:  437:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  438:  int i;
    #####:  439:  int count = 0;
        -:  440:
    #####:  441:  for (i = 0; i < state->deckCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->deck[player][i] == card) count++;
        -:  444:    }
        -:  445:
    #####:  446:  for (i = 0; i < state->handCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->hand[player][i] == card) count++;
        -:  449:    }
        -:  450:
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->discard[player][i] == card) count++;
        -:  454:    }
        -:  455:
    #####:  456:  return count;
        -:  457:}
        -:  458:
     6012:  459:int whoseTurn(struct gameState *state) {
     6012:  460:  return state->whoseTurn;
        -:  461:}
        -:  462:
    #####:  463:int endTurn(struct gameState *state) {
        -:  464:  int k;
        -:  465:  int i;
    #####:  466:  int currentPlayer = whoseTurn(state);
        -:  467:  
        -:  468:  //Discard hand
    #####:  469:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  470:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  471:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  472:  }
    #####:  473:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  474:    
        -:  475:  //Code for determining the player
    #####:  476:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  477:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  478:  }
        -:  479:  else{
    #####:  480:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  481:  }
        -:  482:
    #####:  483:  state->outpostPlayed = 0;
    #####:  484:  state->phase = 0;
    #####:  485:  state->numActions = 1;
    #####:  486:  state->coins = 0;
    #####:  487:  state->numBuys = 1;
    #####:  488:  state->playedCardCount = 0;
    #####:  489:  state->handCount[state->whoseTurn] = 0;
        -:  490:
        -:  491:  //int k; move to top
        -:  492:  //Next player draws hand
    #####:  493:  for (k = 0; k < 5; k++){
    #####:  494:    drawCard(state->whoseTurn, state);//Draw a card
        -:  495:  }
        -:  496:
        -:  497:  //Update money
    #####:  498:  updateCoins(state->whoseTurn, state , 0);
        -:  499:
    #####:  500:  return 0;
        -:  501:}
        -:  502:
    #####:  503:int isGameOver(struct gameState *state) {
        -:  504:  int i;
        -:  505:  int j;
        -:  506:	
        -:  507:  //if stack of Province cards is empty, the game ends
    #####:  508:  if (state->supplyCount[province] == 0)
        -:  509:    {
    #####:  510:      return 1;
        -:  511:    }
        -:  512:
        -:  513:  //if three supply pile are at 0, the game ends
    #####:  514:  j = 0;
    #####:  515:  for (i = 0; i < 25; i++)
        -:  516:    {
    #####:  517:      if (state->supplyCount[i] == 0)
        -:  518:	{
    #####:  519:	  j++;
        -:  520:	}
        -:  521:    }
    #####:  522:  if ( j >= 3)
        -:  523:    {
    #####:  524:      return 1;
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
    #####:  530:int scoreFor (int player, struct gameState *state) {
        -:  531:
        -:  532:  int i;
    #####:  533:  int score = 0;
        -:  534:  //score from hand
    #####:  535:  for (i = 0; i < state->handCount[player]; i++)
        -:  536:    {
    #####:  537:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  538:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  539:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  540:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  541:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  542:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  543:    }
        -:  544:
        -:  545:  //score from discard
    #####:  546:  for (i = 0; i < state->discardCount[player]; i++)
        -:  547:    {
    #####:  548:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  549:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  550:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  551:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  552:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  553:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  554:    }
        -:  555:
        -:  556:  //score from deck
    #####:  557:  for (i = 0; i < state->discardCount[player]; i++)
        -:  558:    {
    #####:  559:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  560:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  561:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  562:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  563:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  564:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  565:    }
        -:  566:
    #####:  567:  return score;
        -:  568:}
        -:  569:
    #####:  570:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  571:  int i;	
        -:  572:  int j;
        -:  573:  int highScore;
        -:  574:  int currentPlayer;
        -:  575:
        -:  576:  //get score for each player
    #####:  577:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  578:    {
        -:  579:      //set unused player scores to -9999
    #####:  580:      if (i >= state->numPlayers)
        -:  581:	{
    #####:  582:	  players[i] = -9999;
        -:  583:	}
        -:  584:      else
        -:  585:	{
    #####:  586:	  players[i] = scoreFor (i, state);
        -:  587:	}
        -:  588:    }
        -:  589:
        -:  590:  //find highest score
    #####:  591:  j = 0;
    #####:  592:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  593:    {
    #####:  594:      if (players[i] > players[j])
        -:  595:	{
    #####:  596:	  j = i;
        -:  597:	}
        -:  598:    }
    #####:  599:  highScore = players[j];
        -:  600:
        -:  601:  //add 1 to players who had less turns
    #####:  602:  currentPlayer = whoseTurn(state);
    #####:  603:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  604:    {
    #####:  605:      if ( players[i] == highScore && i > currentPlayer )
        -:  606:	{
    #####:  607:	  players[i]++;
        -:  608:	}
        -:  609:    }
        -:  610:
        -:  611:  //find new highest score
    #####:  612:  j = 0;
    #####:  613:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  614:    {
    #####:  615:      if ( players[i] > players[j] )
        -:  616:	{
    #####:  617:	  j = i;
        -:  618:	}
        -:  619:    }
    #####:  620:  highScore = players[j];
        -:  621:
        -:  622:  //set winners in array to 1 and rest to 0
    #####:  623:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  624:    {
    #####:  625:      if ( players[i] == highScore )
        -:  626:	{
    #####:  627:	  players[i] = 1;
        -:  628:	}
        -:  629:      else
        -:  630:	{
    #####:  631:	  players[i] = 0;
        -:  632:	}
        -:  633:    }
        -:  634:
    #####:  635:  return 0;
        -:  636:}
        -:  637:
    34528:  638:int drawCard(int player, struct gameState *state)
        -:  639:{
        -:  640:	int count;
        -:  641:  int deckCounter;
    34528:  642:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  643:    
        -:  644:    //Step 1 Shuffle the discard pile back into a deck
        -:  645:    int i;
        -:  646:    //Move discard to deck
    18020:  647:    for (i = 0; i < state->discardCount[player];i++){
    17950:  648:      state->deck[player][i] = state->discard[player][i];
    17950:  649:      state->discard[player][i] = -1;
        -:  650:    }
        -:  651:
       70:  652:    state->deckCount[player] = state->discardCount[player];
       70:  653:    state->discardCount[player] = 0;//Reset discard
        -:  654:
        -:  655:    //Shufffle the deck
       70:  656:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  657:   
        -:  658:    if (DEBUG){//Debug statements
        -:  659:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  660:    }
        -:  661:    
       70:  662:    state->discardCount[player] = 0;
        -:  663:
        -:  664:    //Step 2 Draw Card
       70:  665:    count = state->handCount[player];//Get current player's hand count
        -:  666:    
        -:  667:    if (DEBUG){//Debug statements
        -:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:    
       70:  671:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  672:
       70:  673:    if (deckCounter == 0)
        1:  674:      return -1;
        -:  675:
       69:  676:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       69:  677:    state->deckCount[player]--;
       69:  678:    state->handCount[player]++;//Increment hand count
        -:  679:  }
        -:  680:
        -:  681:  else{
    34458:  682:    int count = state->handCount[player];//Get current hand count for player
        -:  683:    int deckCounter;
        -:  684:    if (DEBUG){//Debug statements
        -:  685:      printf("Current hand count: %d\n", count);
        -:  686:    }
        -:  687:
    34458:  688:    deckCounter = state->deckCount[player];//Create holder for the deck count
    34458:  689:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    34458:  690:    state->deckCount[player]--;
    34458:  691:    state->handCount[player]++;//Increment hand count
        -:  692:  }
    34527:  693:  return 0;
        -:  694:}
        -:  695:
    #####:  696:int getCost(int cardNumber)
        -:  697:{
    #####:  698:  switch( cardNumber ) 
        -:  699:    {
        -:  700:    case curse:
    #####:  701:      return 0;
        -:  702:    case estate:
    #####:  703:      return 2;
        -:  704:    case duchy:
    #####:  705:      return 5;
        -:  706:    case province:
    #####:  707:      return 8;
        -:  708:    case copper:
    #####:  709:      return 0;
        -:  710:    case silver:
    #####:  711:      return 3;
        -:  712:    case gold:
    #####:  713:      return 6;
        -:  714:    case adventurer:
    #####:  715:      return 6;
        -:  716:    case council_room:
    #####:  717:      return 5;
        -:  718:    case feast:
    #####:  719:      return 4;
        -:  720:    case gardens:
    #####:  721:      return 4;
        -:  722:    case mine:
    #####:  723:      return 5;
        -:  724:    case remodel:
    #####:  725:      return 4;
        -:  726:    case smithy:
    #####:  727:      return 4;
        -:  728:    case village:
    #####:  729:      return 3;
        -:  730:    case baron:
    #####:  731:      return 4;
        -:  732:    case great_hall:
    #####:  733:      return 3;
        -:  734:    case minion:
    #####:  735:      return 5;
        -:  736:    case steward:
    #####:  737:      return 3;
        -:  738:    case tribute:
    #####:  739:      return 5;
        -:  740:    case ambassador:
    #####:  741:      return 3;
        -:  742:    case cutpurse:
    #####:  743:      return 4;
        -:  744:    case embargo: 
    #####:  745:      return 2;
        -:  746:    case outpost:
    #####:  747:      return 5;
        -:  748:    case salvager:
    #####:  749:      return 4;
        -:  750:    case sea_hag:
    #####:  751:      return 4;
        -:  752:    case treasure_map:
    #####:  753:      return 4;
        -:  754:    }
        -:  755:	
    #####:  756:  return -1;
        -:  757:}
        -:  758:
     6004:  759:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  760:{
        -:  761:  int i;
        -:  762:  int j;
        -:  763:  int k;
        -:  764:  int x;
        -:  765:  int index;
     6004:  766:  int currentPlayer = whoseTurn(state);
     6004:  767:  int nextPlayer = currentPlayer + 1;
        -:  768:
     6004:  769:  int tributeRevealedCards[2] = {-1, -1};
        -:  770:  int temphand[MAX_HAND];// moved above the if statement
     6004:  771:  int drawntreasure=0;
        -:  772:  int cardDrawn;
     6004:  773:  int z = 0;// this is the counter for the temp hand
     6004:  774:  if (nextPlayer > (state->numPlayers - 1)){
     3024:  775:    nextPlayer = 0;
        -:  776:  }
        -:  777:  
        -:  778:	
        -:  779:  //uses switch to select card and perform actions
     6004:  780:  switch( card ) 
        -:  781:    {
        -:  782:    case adventurer:	  
     2001:  783:      playAdventurer(currentPlayer, state);  //separate function per assignment 2
     2001:  784:	return 0;		
        -:  785:    case council_room:
        -:  786:      //+4 Cards
    #####:  787:      for (i = 0; i < 4; i++)
        -:  788:	{
    #####:  789:	  drawCard(currentPlayer, state);
        -:  790:	}
        -:  791:			
        -:  792:      //+1 Buy
    #####:  793:      state->numBuys++;
        -:  794:			
        -:  795:      //Each other player draws a card
    #####:  796:      for (i = 0; i < state->numPlayers; i++)
        -:  797:	{
    #####:  798:	  if ( i != currentPlayer )
        -:  799:	    {
    #####:  800:	      drawCard(i, state);
        -:  801:	    }
        -:  802:	}
        -:  803:			
        -:  804:      //put played card in played card pile
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case feast:
        -:  810:      //gain card with cost up to 5
        -:  811:      //Backup hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  814:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  815:      }
        -:  816:      //Backup hand
        -:  817:
        -:  818:      //Update Coins for Buy
    #####:  819:      updateCoins(currentPlayer, state, 5);
    #####:  820:      x = 1;//Condition to loop on
    #####:  821:      while( x == 1) {//Buy one card
    #####:  822:	if (supplyCount(choice1, state) <= 0){
        -:  823:	  if (DEBUG)
        -:  824:	    printf("None of that card left, sorry!\n");
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  828:	  }
        -:  829:	}
    #####:  830:	else if (state->coins < getCost(choice1)){
    #####:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
        -:  836:	}
        -:  837:	else{
        -:  838:
        -:  839:	  if (DEBUG){
        -:  840:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:	  }
        -:  842:
    #####:  843:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  844:	  x = 0;//No more buying cards
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  848:	  }
        -:  849:
        -:  850:	}
        -:  851:      }     
        -:  852:
        -:  853:      //Reset Hand
    #####:  854:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  855:	state->hand[currentPlayer][i] = temphand[i];
    #####:  856:	temphand[i] = -1;
        -:  857:      }
        -:  858:      //Reset Hand
        -:  859:      			
    #####:  860:      return 0;
        -:  861:			
        -:  862:    case gardens:
    #####:  863:      return -1;
        -:  864:			
        -:  865:    case mine:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:		
    #####:  873:      if (choice2 > treasure_map || choice2 < curse)
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      gainCard(choice2, state, 2, currentPlayer);
        -:  884:
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:
        -:  888:      //discard trashed card
    #####:  889:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  890:	{
    #####:  891:	  if (state->hand[currentPlayer][i] == j)
        -:  892:	    {
    #####:  893:	      discardCard(i, currentPlayer, state, 0);			
    #####:  894:	      break;
        -:  895:	    }
        -:  896:	}
        -:  897:			
    #####:  898:      return 0;
        -:  899:			
        -:  900:    case remodel:
    #####:  901:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  902:
    #####:  903:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      gainCard(choice2, state, 0, currentPlayer);
        -:  909:
        -:  910:      //discard card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
        -:  912:
        -:  913:      //discard trashed card
    #####:  914:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  915:	{
    #####:  916:	  if (state->hand[currentPlayer][i] == j)
        -:  917:	    {
    #####:  918:	      discardCard(i, currentPlayer, state, 0);			
    #####:  919:	      break;
        -:  920:	    }
        -:  921:	}
        -:  922:
        -:  923:
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case smithy:
     2001:  927:      playSmithy(currentPlayer, state, handPos);  //separate function per assignment 2
        -:  928:		  
        -:  929:    case village:
        -:  930:      //+1 Card
     4002:  931:      drawCard(currentPlayer, state);
        -:  932:			
        -:  933:      //+2 Actions
     4002:  934:      state->numActions = state->numActions + 2;
        -:  935:			
        -:  936:      //discard played card from hand
     4002:  937:      discardCard(handPos, currentPlayer, state, 0);
     4002:  938:      return 0;
        -:  939:		
        -:  940:    case baron:
    #####:  941:      state->numBuys++;//Increase buys by 1!
    #####:  942:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  943:	int p = 0;//Iterator for hand!
    #####:  944:	int card_not_discarded = 1;//Flag for discard set!
    #####:  945:	while(card_not_discarded){
    #####:  946:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  947:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  948:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  949:	    state->discardCount[currentPlayer]++;
    #####:  950:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  951:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  952:	    }
    #####:  953:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  954:	    state->handCount[currentPlayer]--;
    #####:  955:	    card_not_discarded = 0;//Exit the loop
        -:  956:	  }
    #####:  957:	  else if (p > state->handCount[currentPlayer]){
        -:  958:	    if(DEBUG) {
        -:  959:	      printf("No estate cards in your hand, invalid choice\n");
        -:  960:	      printf("Must gain an estate if there are any\n");
        -:  961:	    }
    #####:  962:	    if (supplyCount(estate, state) > 0){
    #####:  963:	      gainCard(estate, state, 0, currentPlayer);
    #####:  964:	      state->supplyCount[estate]--;//Decrement estates
    #####:  965:	      if (supplyCount(estate, state) == 0){
    #####:  966:		isGameOver(state);
        -:  967:	      }
        -:  968:	    }
    #####:  969:	    card_not_discarded = 0;//Exit the loop
        -:  970:	  }
        -:  971:			    
        -:  972:	  else{
    #####:  973:	    p++;//Next card
        -:  974:	  }
        -:  975:	}
        -:  976:      }
        -:  977:			    
        -:  978:      else{
    #####:  979:	if (supplyCount(estate, state) > 0){
    #####:  980:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  981:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  982:	  if (supplyCount(estate, state) == 0){
    #####:  983:	    isGameOver(state);
        -:  984:	  }
        -:  985:	}
        -:  986:      }
        -:  987:	    
        -:  988:      
    #####:  989:      return 0;
        -:  990:		
        -:  991:    case great_hall:
        -:  992:      //+1 Card
        1:  993:      drawCard(currentPlayer, state);
        -:  994:			
        -:  995:      //+1 Actions
        1:  996:      state->numActions++;
        -:  997:			
        -:  998:      //discard card from hand
        1:  999:      discardCard(handPos, currentPlayer, state, 0);
        1: 1000:      return 0;
        -: 1001:		
        -: 1002:    case minion:
        -: 1003:      //+1 action
    #####: 1004:      state->numActions++;
        -: 1005:			
        -: 1006:      //discard card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:			
    #####: 1009:      if (choice1)		//+2 coins
        -: 1010:	{
    #####: 1011:	  state->coins = state->coins + 2;
        -: 1012:	}
        -: 1013:			
    #####: 1014:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1015:	{
        -: 1016:	  //discard hand
    #####: 1017:	  while(numHandCards(state) > 0)
        -: 1018:	    {
    #####: 1019:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1020:	    }
        -: 1021:				
        -: 1022:	  //draw 4
    #####: 1023:	  for (i = 0; i < 4; i++)
        -: 1024:	    {
    #####: 1025:	      drawCard(currentPlayer, state);
        -: 1026:	    }
        -: 1027:				
        -: 1028:	  //other players discard hand and redraw if hand size > 4
    #####: 1029:	  for (i = 0; i < state->numPlayers; i++)
        -: 1030:	    {
    #####: 1031:	      if (i != currentPlayer)
        -: 1032:		{
    #####: 1033:		  if ( state->handCount[i] > 4 )
        -: 1034:		    {
        -: 1035:		      //discard hand
    #####: 1036:		      while( state->handCount[i] > 0 )
        -: 1037:			{
    #####: 1038:			  discardCard(handPos, i, state, 0);
        -: 1039:			}
        -: 1040:							
        -: 1041:		      //draw 4
    #####: 1042:		      for (j = 0; j < 4; j++)
        -: 1043:			{
    #####: 1044:			  drawCard(i, state);
        -: 1045:			}
        -: 1046:		    }
        -: 1047:		}
        -: 1048:	    }
        -: 1049:				
        -: 1050:	}
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case steward:           
    #####: 1054:      playSteward(currentPlayer, state, choice1, choice2, choice3, handPos);  //separate function per assignment 2 		  
        -: 1055:	
        -: 1056:		  
        -: 1057:    case tribute:
    #####: 1058:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1059:	if (state->deckCount[nextPlayer] > 0){
    #####: 1060:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	  state->deckCount[nextPlayer]--;
        -: 1062:	}
    #####: 1063:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1064:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1065:	  state->discardCount[nextPlayer]--;
        -: 1066:	}
        -: 1067:	else{
        -: 1068:	  //No Card to Reveal
        -: 1069:	  if (DEBUG){
        -: 1070:	    printf("No cards to reveal\n");
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      else{
    #####: 1076:	if (state->deckCount[nextPlayer] == 0){
    #####: 1077:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1078:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1079:	    state->deckCount[nextPlayer]++;
    #####: 1080:	    state->discard[nextPlayer][i] = -1;
    #####: 1081:	    state->discardCount[nextPlayer]--;
        -: 1082:	  }
        -: 1083:			    
    #####: 1084:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1085:	} 
    #####: 1086:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    #####: 1089:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
        -: 1092:      }    
        -: 1093:		       
    #####: 1094:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1095:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1096:	state->playedCardCount++;
    #####: 1097:	tributeRevealedCards[1] = -1;
        -: 1098:      }
        -: 1099:
    #####: 1100:      for (i = 0; i <= 2; i ++){
    #####: 1101:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1102:	  state->coins += 2;
        -: 1103:	}
        -: 1104:		    
    #####: 1105:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1106:	  drawCard(currentPlayer, state);
    #####: 1107:	  drawCard(currentPlayer, state);
        -: 1108:	}
        -: 1109:	else{//Action Card
    #####: 1110:	  state->numActions = state->numActions + 2;
        -: 1111:	}
        -: 1112:      }
        -: 1113:	    
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case ambassador:
    #####: 1117:      j = 0;		//used to check if player has enough cards to discard
        -: 1118:
    #####: 1119:      if (choice2 > 2 || choice2 < 0)
        -: 1120:	{
    #####: 1121:	  return -1;				
        -: 1122:	}
        -: 1123:
    #####: 1124:      if (choice1 == handPos)
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
    #####: 1129:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1130:	{
    #####: 1131:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1132:	    {
    #####: 1133:	      j++;
        -: 1134:	    }
        -: 1135:	}
    #####: 1136:      if (j < choice2)
        -: 1137:	{
    #####: 1138:	  return -1;				
        -: 1139:	}
        -: 1140:
        -: 1141:      if (DEBUG) 
        -: 1142:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1143:
        -: 1144:      //increase supply count for choosen card by amount being discarded
    #####: 1145:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1146:			
        -: 1147:      //each other player gains a copy of revealed card
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1153:	    }
        -: 1154:	}
        -: 1155:
        -: 1156:      //discard played card from hand
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1158:
        -: 1159:      //trash copies of cards returned to supply
    #####: 1160:      for (j = 0; j < choice2; j++)
        -: 1161:	{
    #####: 1162:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1163:	    {
    #####: 1164:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1165:		{
    #####: 1166:		  discardCard(i, currentPlayer, state, 1);
    #####: 1167:		  break;
        -: 1168:		}
        -: 1169:	    }
        -: 1170:	}			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case cutpurse:
        -: 1175:
    #####: 1176:      updateCoins(currentPlayer, state, 2);
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
    #####: 1179:	  if (i != currentPlayer)
        -: 1180:	    {
    #####: 1181:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1182:		{
    #####: 1183:		  if (state->hand[i][j] == copper)
        -: 1184:		    {
    #####: 1185:		      discardCard(j, i, state, 0);
    #####: 1186:		      break;
        -: 1187:		    }
    #####: 1188:		  if (j == state->handCount[i])
        -: 1189:		    {
    #####: 1190:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1191:			{
        -: 1192:			  if (DEBUG)
        -: 1193:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1194:			}	
    #####: 1195:		      break;
        -: 1196:		    }		
        -: 1197:		}
        -: 1198:					
        -: 1199:	    }
        -: 1200:				
        -: 1201:	}				
        -: 1202:
        -: 1203:      //discard played card from hand
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1205:
    #####: 1206:      return 0;
        -: 1207:
        -: 1208:		
        -: 1209:    case embargo: 
    #####: 1210:      playEmbargo(currentPlayer, state, choice1, handPos);  //separate function per assignment 2
        -: 1211:		  
        -: 1212:    case outpost:
        -: 1213:      //set outpost flag
    #####: 1214:      state->outpostPlayed++;
        -: 1215:			
        -: 1216:      //discard card
    #####: 1217:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case salvager:
        -: 1221:      //+1 buy
    #####: 1222:      state->numBuys++;
        -: 1223:			
    #####: 1224:      if (choice1)
        -: 1225:	{
        -: 1226:	  //gain coins equal to trashed card
    #####: 1227:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:	  //trash card
    #####: 1229:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1230:	}
        -: 1231:			
        -: 1232:      //discard card
    #####: 1233:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case sea_hag:
    #####: 1237:      playSeaHag(currentPlayer, state);  //separate function per assignment 2 
        -: 1238:
        -: 1239:    case treasure_map:
        -: 1240:      //search hand for another treasure_map
    #####: 1241:      index = -1;
    #####: 1242:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1243:	{
    #####: 1244:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1245:	    {
    #####: 1246:	      index = i;
    #####: 1247:	      break;
        -: 1248:	    }
        -: 1249:	}
    #####: 1250:      if (index > -1)
        -: 1251:	{
        -: 1252:	  //trash both treasure cards
    #####: 1253:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1254:	  discardCard(index, currentPlayer, state, 1);
        -: 1255:
        -: 1256:	  //gain 4 Gold cards
    #####: 1257:	  for (i = 0; i < 4; i++)
        -: 1258:	    {
    #####: 1259:	      gainCard(gold, state, 1, currentPlayer);
        -: 1260:	    }
        -: 1261:				
        -: 1262:	  //return success
    #####: 1263:	  return 1;
        -: 1264:	}
        -: 1265:			
        -: 1266:      //no second treasure_map found in hand
    #####: 1267:      return -1;
        -: 1268:    }
        -: 1269:	
    #####: 1270:  return -1;
        -: 1271:}
        -: 1272:
     6010: 1273:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1274:{
        -: 1275:	
        -: 1276:  //if card is not trashed, added to Played pile 
     6010: 1277:  if (trashFlag < 1)
        -: 1278:    {
        -: 1279:      //add card to played pile
     6007: 1280:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6007: 1281:      state->playedCardCount++;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //set played card to -1
     6010: 1285:  state->hand[currentPlayer][handPos] = -1;
        -: 1286:	
        -: 1287:  //remove card from player's hand
     6010: 1288:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
        2: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
     6008: 1293:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
        -: 1298:  else 	
        -: 1299:    {
        -: 1300:      //replace discarded card with last card in hand
     6008: 1301:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1302:      //set last card to -1
     6008: 1303:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1304:      //reduce number of cards in hand
     6008: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        -: 1307:	
     6010: 1308:  return 0;
        -: 1309:}
        -: 1310:
      330: 1311:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1312:{
        -: 1313:  //Note: supplyPos is enum of choosen card
        -: 1314:	
        -: 1315:  //check if supply pile is empty (0) or card is not used in game (-1)
      330: 1316:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1317:    {
       36: 1318:      return -1;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //added card for [whoseTurn] current player:
        -: 1322:  // toFlag = 0 : add to discard
        -: 1323:  // toFlag = 1 : add to deck
        -: 1324:  // toFlag = 2 : add to hand
        -: 1325:
      294: 1326:  if (toFlag == 1)
        -: 1327:    {
       98: 1328:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       98: 1329:      state->deckCount[player]++;
        -: 1330:    }
      196: 1331:  else if (toFlag == 2)
        -: 1332:    {
       98: 1333:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       98: 1334:      state->handCount[player]++;
        -: 1335:    }
        -: 1336:  else
        -: 1337:    {
       98: 1338:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       98: 1339:      state->discardCount[player]++;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //decrease number in supply pile
      294: 1343:  state->supplyCount[supplyPos]--;
        -: 1344:	 
      294: 1345:  return 0;
        -: 1346:}
        -: 1347:
       14: 1348:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1349:{
        -: 1350:  int i;
        -: 1351:	
        -: 1352:  //reset coin count
       14: 1353:  state->coins = 0;
        -: 1354:
        -: 1355:  //add coins for each Treasure card in player's hand
       84: 1356:  for (i = 0; i < state->handCount[player]; i++)
        -: 1357:    {
       70: 1358:      if (state->hand[player][i] == copper)
        -: 1359:	{
       56: 1360:	  state->coins += 1;
        -: 1361:	}
       14: 1362:      else if (state->hand[player][i] == silver)
        -: 1363:	{
    #####: 1364:	  state->coins += 2;
        -: 1365:	}
       14: 1366:      else if (state->hand[player][i] == gold)
        -: 1367:	{
    #####: 1368:	  state->coins += 3;
        -: 1369:	}	
        -: 1370:    }	
        -: 1371:
        -: 1372:  //add bonus
       14: 1373:  state->coins += bonus;
        -: 1374:
       14: 1375:  return 0;
        -: 1376:}
        -: 1377:
        -: 1378:
        -: 1379://end of dominion.c
        -: 1380:
